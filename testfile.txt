system_prompt = """
<s>[INST] <<SYS>>
You are a helpful, respectful and honest assistant for labeling topics.
<</SYS>>
"""

example_prompt = """
I have a topic that contains the following keywords: 'meat, beef, eat, eating, emissions, steak, food, health, processed, chicken'.

Based on the information about the topic above, please create a short label of this topic. Make sure you to only return the label and nothing more.
[/INST] Environmental impacts of eating meat
"""

main_prompt_template = """
[INST]
I have a topic that contains the following keywords: '[KEYWORDS]'.

Based on the information about the topic above, please create a short label of this topic. Make sure you to only return the label and nothing more.
[/INST]
"""

def generate_summary(topic, keywords):
    

    main_prompt = main_prompt_template.replace("[KEYWORDS]", ', '.join(keywords))
    prompt = system_prompt + example_prompt + main_prompt
    
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": example_prompt},
            {"role": "user", "content": main_prompt}
        ],
        max_tokens=100  # Adjust token count as needed
    )
    
    
    return response.choices[0].message.content
	
	
def generate_label(keywords):
    main_prompt = main_prompt_template.replace("[KEYWORDS]", ', '.join(keywords))
    prompt = system_prompt + example_prompt + main_prompt

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": prompt}
        ],
        max_tokens=50  # Adjust token count as needed
    )
    
    return response['choices'][0]['message']['content'].strip()
	
# Generate summaries for each topic
summaries = {}
for _, row in keybert_results.iterrows():
    topic = row['Topic']
    keywords = ', '.join(row['KeyBERT'])
    summary = generate_summary(topic, keywords)
    summaries[topic] = summary

# Display the summaries
for topic, summary in summaries.items():
    print(f"Topic {topic}: {summary}")
	

# Create a DataFrame from summaries
summaries_df = pd.DataFrame(list(summaries.items()), columns=['Topic', 'Summary'])

# Merge summaries back into the original DataFrame
topic_info_with_summaries = pd.merge(topic_info, summaries_df, on='Topic', how='left')

# Save the DataFrame with summaries to a CSV file (optional)
# topic_info_with_summaries.to_csv('/path/to/save/your/topic_info_with_summaries.csv', index=False)  # Uncomment and modify this line as needed

# Display the DataFrame with summaries
print(topic_info_with_summaries)