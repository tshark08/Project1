import openai
import pandas as pd

# Assuming you have a DataFrame 'topic_info' with an 'OpenAI' column
topic_info = pd.DataFrame({
    'OpenAI': [
        'Payroll Issues and Errors',
        'Paycom Tax Processing and Reporting Issues (2023)',
        'Paycom System Issues and Management Strategies',
        'Topical Label: EDI Feed Errors in Benefits Enrollment.',
        'Shift Differential and Overtime Pay Calculations',
        'PTO and Accrual Balance Issues',
        'Time Clock and Timecard Management Issues',
        'Paycom GL Reporting and Mapping Issues',
        'Payroll Processing Issues and Concerns',
        'Direct deposit issues and check fraud investigation',
        'Urgent Follow-up on Overdue Wires',
        'Quest Diagnostics Delays in Drug Testing Requests',
        '401k and Roth Contribution and Match Issues',
        'Payroll Processing and Billing Issues',
        'Paycom Online Adjustment of Notification Settings and Approval Process',
        'Paycom Garnishment Issues and Management',
        'Payroll and Deduction Code Issues in April',
        'ACA Qualifying Offer and Reporting Issues',
        'PAF Effective Dating Issues with Pay Changes',
        'Expense Approval and Dashboard Issues'
    ]
})

# Function to process a batch of topics
def process_topics_batch(topics_batch):
    topics = "\n".join(f"{i+1}. {topic}" for i, topic in enumerate(topics_batch))

    prompt = f"""
    Given the list of topics generated by the OpenAI model, refine and consolidate them into final topic categories that are more specific and actionable.

    Topics generated by OpenAI:
    {topics}

    Break these topics into more specific and actionable final topic categories. Provide a brief description for each final category.

    Final Topic Categories:
    """

    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=prompt,
        max_tokens=500,
        temperature=0.7
    )

    return response.choices[0].text.strip()

# Split the topics into batches
batch_size = 5
batches = [topic_info['OpenAI'][i:i + batch_size] for i in range(0, len(topic_info), batch_size)]

# Process each batch and collect the results
final_categories = []
for batch in batches:
    result = process_topics_batch(batch)
    final_categories.append(result)

# Combine the results
final_results = "\n".join(final_categories)
print(final_results)
