import itertools
import pandas as pd
from bertopic import BERTopic
from umap import UMAP
from hdbscan import HDBSCAN
from sklearn.metrics import silhouette_score, calinski_harabasz_score, davies_bouldin_score

# Define a list of parameters to try for UMAP
umap_params = [
    {'n_neighbors': 15, 'n_components': 2, 'min_dist': 0.1},
    {'n_neighbors': 30, 'n_components': 2, 'min_dist': 0.1},
    {'n_neighbors': 50, 'n_components': 2, 'min_dist': 0.5}
]

# Define a list of parameters to try for HDBSCAN
hdbscan_params = [
    {'min_cluster_size': 50, 'min_samples': 20},
    {'min_cluster_size': 100, 'min_samples': 50},
    {'min_cluster_size': 200, 'min_samples': 100}
]

# Function to evaluate the model
def evaluate_model(model, topics, probs, embeddings):
    # Example metrics
    silhouette_avg = silhouette_score(embeddings, topics)
    ch_score = calinski_harabasz_score(embeddings, topics)
    db_score = davies_bouldin_score(embeddings, topics)
    return silhouette_avg, ch_score, db_score

# Loop over the parameter combinations and fit BERTopic models
results = []
for umap_param, hdbscan_param in itertools.product(umap_params, hdbscan_params):
    # Create UMAP and HDBSCAN models with the current parameter combination
    umap_model = UMAP(**umap_param)
    hdbscan_model = HDBSCAN(**hdbscan_param, gen_min_span_tree=True, prediction_data=True)

    # Fit a BERTopic model with the current parameter combination
    model = BERTopic(
        umap_model=umap_model,
        hdbscan_model=hdbscan_model,
        top_n_words=10,
        language='english',
        calculate_probabilities=True,
        verbose=True,
        n_gram_range=(1, 2)
    )
    topics, probs = model.fit_transform(data)
    embeddings = model.embedding_model.encode(data, show_progress_bar=True)

    # Evaluate the model
    silhouette_avg, ch_score, db_score = evaluate_model(model, topics, probs, embeddings)
    results.append({
        'umap_param': umap_param,
        'hdbscan_param': hdbscan_param,
        'silhouette_score': silhouette_avg,
        'calinski_harabasz_score': ch_score,
        'davies_bouldin_score': db_score
    })

    # Visualize the hierarchy and save the figure to an HTML file
    fig = model.visualize_hierarchy()
    fig.write_html(f'model_umap_{umap_param}_hdbscan_{hdbscan_param}.html')

# Save the results to a CSV file
results_df = pd.DataFrame(results)
results_df.to_csv('bertopic_optimization_results.csv', index=False)

# Find the best parameter combination
best_result = results_df.loc[results_df['silhouette_score'].idxmax()]
print("Best UMAP Parameters:", best_result['umap_param'])
print("Best HDBSCAN Parameters:", best_result['hdbscan_param'])
print("Best Silhouette Score:", best_result['silhouette_score'])
